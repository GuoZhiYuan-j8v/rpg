{"version":3,"sources":["file:///C:/Users/ffgdgrrr/Desktop/rpg/assets/ElectronAPI.ts"],"names":["_decorator","Component","ccclass","property","ele","window","electron","ElectronAPI","center","ipcRenderer","send","fullScreen","openDevTools","closeDevTools","setSize","width","height","toString","setResolution","isFullScreen","sendSync","setScreenResolution","nircmdUD","order","getMassage","getAllResolutions","getCurrentResolution","quit"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n// electron模块，打包web-mobil后在HTML中定义全局变量electron\nconst ele = (window as any).electron;\n\n@ccclass(\"ElectronAPI\")\nexport default class ElectronAPI extends Component {\n\n    // e代表electron\n\n    /**\n     * @zh 移动窗口到中心\n     */\n    static center (): void {\n        ele.ipcRenderer.send(\"e_center\");\n    }\n\n    /**\n     * @zh 全屏\n     */\n    static fullScreen () {\n        ele.ipcRenderer.send(\"e_fullScreen\");\n    }\n\n    /**\n     * @zh 窗口化\n     */\n    static window () {\n        ele.ipcRenderer.send(\"e_window\");\n    }\n\n    /**\n     * @zh 打开开发者工具\n     */\n    static openDevTools () {\n        ele.ipcRenderer.send(\"e_openDevTools\");\n    }\n\n    /**\n     * @zh 关闭开发者工具\n     */\n    static closeDevTools () {\n        ele.ipcRenderer.send(\"e_closeDevTools\");\n    }\n\n    /**\n     * @zh 设置窗口大小\n     */\n    static setSize (width: number, height: number) {\n        ele.ipcRenderer.send(\"e_setSize\", width.toString(), height.toString());\n    }\n\n    /**\n     * @zh 设置分辨率，修改的显示器的分辨率\n     */\n    static setResolution (width: number, height: number) {\n        ele.ipcRenderer.send(\"e_setResolution\", width.toString(), height.toString());\n    }\n\n    /**\n     * @zh 当前是否全屏\n     * @return 返回boolean\n     */\n    static isFullScreen (): boolean {\n        return ele.ipcRenderer.sendSync(\"e_isFullScreen\");\n    }\n\n    /**\n     * @zh 设置分辨率，如果全屏将设置显示器分辨率，不全屏将设置窗口大小\n     */\n    static setScreenResolution(width: number, height: number) {\n        if (this.isFullScreen() == true) {\n            this.setResolution(width, height);\n        } else {\n            this.setSize(width, height);\n        }\n    }\n\n    /**\n     * @zh 自定义nircmd命令，不需要在前面输入nircmd.exe\n     */\n    static nircmdUD (order: string) {\n        ele.ipcRenderer.send(\"e_nircmdUD\", order);\n    }\n\n    /**\n     * @zh 获取一些信息，返回string\n     */\n    static getMassage (): string {\n        return ele.ipcRenderer.sendSync(\"e_getMassage\");\n    }\n\n    /**\n     * @zh 获取屏幕支持的所有分辨率，返回一个string的数组\n     * @example \n     * ```ts\n     * let e = ElectronAPI.getAllResolutions();\n     * console.log(e);\n     * \n     * 打印结果如下\n     * [\n        \"1920×1080\",\n        \"1680×1050\",\n        \"1600×900\",\n        \"1440×900\",\n        \"1400×1050\",\n        \"1366×768\",\n        \"1360×768\",\n        \"1280×1024\",\n        \"1280×960\",\n        \"1280×800\",\n        \"1280×768\",\n        \"1280×720\",\n        \"1280×600\",\n        \"1152×864\",\n        \"1024×768\",\n        \"800×600\"\n        ]\n     * ```\n     */\n    static getAllResolutions (): string[] {\n        return ele.ipcRenderer.sendSync(\"e_getAllResolutions\");\n    }\n\n    /**\n     * @zh 获取当前的屏幕分辨率，是一个string变量\n     * @example\n     * ```ts\n     * let e = ElectronAPI.getCurrentResolution();\n     * console.log(e);\n     * \n     * 打印结果如下\n     * '1920×1080'\n     * ```\n     */\n    static getCurrentResolution (): string {\n        return ele.ipcRenderer.sendSync(\"e_getCurrentResolution\");\n    }\n\n    /**\n     * @zh 退出游戏\n     */\n    static quit () {\n        ele.ipcRenderer.send(\"e_quit\");\n    }\n\n\n\n}"]}